// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CRM.Models;

namespace CRM.Data
{
    public partial class PerfumeContext : DbContext
    {
        public PerfumeContext()
        {
        }

        public PerfumeContext(DbContextOptions<PerfumeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Coupon> Coupon { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        //public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Item> Item { get; set; }
        public virtual DbSet<ShippingMatrix> ShippingsMatrix { get; set; }
        public virtual DbSet<ItemImage> ItemImage { get; set; }
        //public virtual DbSet<ItemPrice> ItemPrice { get; set; }
        public virtual DbSet<OrdersCaptures> OrdersCaptures { get; set; }

        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderItem> OrderItem { get; set; }
        public virtual DbSet<ShoppingCart> ShoppingCart { get; set; }
        public virtual DbSet<FavouriteItem> FavouriteItems { get; set; }
        public DbSet<SocialMediaLink> SocialMediaLinks { get; set; }
        public DbSet<PageContent> PageContents { get; set; }
        public DbSet<ContactUs> ContactUs { get; set; }
        public DbSet<CustomerN> CustomerNs { get; set; }
        public DbSet<CustomerAddress> customerAddresses { get; set; }
        public DbSet<ItemPriceN> itemPriceNs { get; set; }
        public DbSet<PaymentMehod> paymentMehods { get; set; }
        public DbSet<CouponType> CouponTypes { get; set; }
        public DbSet<OrderStatus> OrderStatuses { get; set; }
        public DbSet<OrderTraking> OrderTrakings { get; set; }
        public DbSet<Newsletter> Newsletters { get; set; }
        public DbSet<PublicHeader> PublicHeader { get; set; }
        



        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.CategoryTlar).HasDefaultValueSql("(N'')");

                entity.Property(e => e.CategoryTlen).HasDefaultValueSql("(N'')");

                entity.Property(e => e.IsActive).HasDefaultValueSql("(CONVERT([bit],(0)))");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Country)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Currency");
            });

            //modelBuilder.Entity<Customer>(entity =>
            //{
            //    entity.Property(e => e.CustomerId).ValueGeneratedNever();
            //});

            modelBuilder.Entity<Item>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Item)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Item_Categories");
            });

            modelBuilder.Entity<ItemImage>(entity =>
            {
                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemImageNavigation)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemImage_Item");
            });

            //modelBuilder.Entity<ItemPrice>(entity =>
            //{
            //    entity.Property(e => e.ItemPriceId).ValueGeneratedNever();
            //});
            modelBuilder.Entity<ItemPriceN>(entity =>
            {
                //entity.Property(e => e.ItemPriceId).ValueGeneratedNever();

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemPriceNs)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemPriceN_Item");
            });

            //modelBuilder.Entity<Order>(entity =>
            //{
            //    entity.HasOne(d => d.Customer)
            //        .WithMany(p => p.Order)
            //        .HasForeignKey(d => d.CustomerId)
            //        .HasConstraintName("FK_Order_Customer");
            //});

            //modelBuilder.Entity<OrderItem>(entity =>
            //{
            //    entity.HasOne(d => d.Item)
            //        .WithMany(p => p.OrderItem)
            //        .HasForeignKey(d => d.ItemId)
            //        .HasConstraintName("FK_OrderItem_Item");

            //    entity.HasOne(d => d.Order)
            //        .WithMany(p => p.OrderItem)
            //        .HasForeignKey(d => d.OrderId)
            //        .HasConstraintName("FK_OrderItem_Order");
            //});

            modelBuilder.Entity<PageContent>().HasData(new PageContent { PageContentId = 1, PageTitleAr = "من نحن", PageTitleEn = "About", ContentAr = "من نحن", ContentEn = "About Page" });
            modelBuilder.Entity<PageContent>().HasData(new PageContent { PageContentId = 2, PageTitleAr = "الشروط والاحكام", PageTitleEn = "Condition and Terms", ContentAr = "الشروط والاحكام", ContentEn = "Condition and Terms Page" });
            modelBuilder.Entity<PageContent>().HasData(new PageContent { PageContentId = 3, PageTitleAr = "سياسة الخصوصية", PageTitleEn = "Privacy Policy", ContentAr = "سياسة الخصوصية", ContentEn = "Privacy Policy Page" });
            modelBuilder.Entity<SocialMediaLink>().HasData(new SocialMediaLink { SocialMediaLinkId = 1,WhatSapp= "0096598050646", Facebook = "Facebook@Example.com", Instgram = "Instgram@Example.com", LinkedIn = "LinkedIn@Example.com", Twitter = "Twitter@Example.com",Address="Kwait",Fax="9621" });
            modelBuilder.Entity<PaymentMehod>().HasData(new PaymentMehod { PaymentMethodId = 1, PaymentMethodEN = "MyFattorah", PaymentMethodAR = "MyFattorah", PaymentMethodPic = ""});
            modelBuilder.Entity<PaymentMehod>().HasData(new PaymentMehod { PaymentMethodId = 2, PaymentMethodEN = "Cash", PaymentMethodAR = "Cash", PaymentMethodPic = "" });
            modelBuilder.Entity<PaymentMehod>().HasData(new PaymentMehod { PaymentMethodId = 3, PaymentMethodEN = "Tabby", PaymentMethodAR = "Tabby", PaymentMethodPic = "" });

            modelBuilder.Entity<OrderStatus>().HasData(new OrderStatus { OrderStatusId = 1, Status = "Initiated"});
            modelBuilder.Entity<OrderStatus>().HasData(new OrderStatus { OrderStatusId = 2, Status = "Paid" });
            modelBuilder.Entity<OrderStatus>().HasData(new OrderStatus { OrderStatusId = 3, Status = "Paid Failed" });

            modelBuilder.Entity<OrderStatus>().HasData(new OrderStatus { OrderStatusId = 4, Status = "Canceled" });
            modelBuilder.Entity<OrderStatus>().HasData(new OrderStatus { OrderStatusId = 5, Status = "OnDelivery"});
            modelBuilder.Entity<OrderStatus>().HasData(new OrderStatus { OrderStatusId = 6, Status = "Processing" });
            modelBuilder.Entity<OrderStatus>().HasData(new OrderStatus { OrderStatusId = 7, Status = "Packing" });

            modelBuilder.Entity<Currency>().HasData(new Currency { CurrencyId = 1, CurrencyTlar = "د.ك.", CurrencyTlen= "KWD", CurrencyPic= "Images/Currency/065e4dcb-8da6-409c-bab2-c93c13eee243_denar.jpg",IsActive=true });
            modelBuilder.Entity<Currency>().HasData(new Currency { CurrencyId = 2, CurrencyTlar = "ر.ع.", CurrencyTlen = "OMR", CurrencyPic = "Images/Currency/OMR.jpg", IsActive = true });
            modelBuilder.Entity<Currency>().HasData(new Currency { CurrencyId = 3, CurrencyTlar = "د.ب", CurrencyTlen = "BHD", CurrencyPic = "Images/Currency/BH.jpg", IsActive = true });
            modelBuilder.Entity<Currency>().HasData(new Currency { CurrencyId = 4, CurrencyTlar = "د.إ.", CurrencyTlen = "AED", CurrencyPic = "Images/Currency/banknote.jpg", IsActive = true });
            modelBuilder.Entity<Currency>().HasData(new Currency { CurrencyId = 5, CurrencyTlar = "ر.س.", CurrencyTlen = "SAR", CurrencyPic = "Images/Currency/download.jpg", IsActive = true });
            modelBuilder.Entity<Currency>().HasData(new Currency { CurrencyId = 6, CurrencyTlar = "ر.ق.", CurrencyTlen = "QAR", CurrencyPic = "Images/Currency/SA.jpg", IsActive = true });

            modelBuilder.Entity<Country>().HasData(new Country { CountryId = 1,  CountryTlen = "UAE",CountryTlar="الإمارات", CurrencyId = 4, OrderIndex = 1, ShippingCost = 20, Pic = "Images/Country/download.png", IsActive = true,tax=0 });
            modelBuilder.Entity<Country>().HasData(new Country { CountryId = 2,  CountryTlen = "KSA", CountryTlar = "السعودية", CurrencyId = 5, OrderIndex = 1, ShippingCost = 20, Pic = "Images/Country/Saudi.png", IsActive = true, tax = 15 });
            modelBuilder.Entity<Country>().HasData(new Country { CountryId = 3,  CountryTlen = "QA", CountryTlar = "قطر", CurrencyId = 6, OrderIndex = 1, ShippingCost = 20, Pic = "Images/Country/flag-of-qatar_1.png", IsActive = true , tax = 0 });

            modelBuilder.Entity<Country>().HasData(new Country { CountryId = 4,  CountryTlen = "KWT", CountryTlar = "الكويت", CurrencyId = 1, OrderIndex = 1, ShippingCost = 20, Pic = "Images/Country/Kwait.png", IsActive = true , tax = 0 });
            modelBuilder.Entity<Country>().HasData(new Country { CountryId = 5, CountryTlen = "OM", CountryTlar = "عمان", CurrencyId = 2, OrderIndex = 1, ShippingCost = 20, Pic = "Images/Country/png-transparent-flag-of-oman-flag-of-chile-flag-of-oman-flag-photography-logo.png", IsActive = true, tax = 0 });
            modelBuilder.Entity<Country>().HasData(new Country { CountryId = 6, CountryTlen = "BH", CountryTlar = "بحرين", CurrencyId = 3, OrderIndex = 1, ShippingCost = 20, Pic = "Images/Country/Bahrain.png", IsActive = true , tax = 0 });

            modelBuilder.Entity<PublicHeader>().HasData(new PublicHeader { PublicHeaderId = 1,pic= "Images/PublicHeader/BannerOrg.jpg" });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}